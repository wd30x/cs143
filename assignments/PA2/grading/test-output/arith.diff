1,241c1,68
< CLASS
< TYPEID A
< '{'
< OBJECTID var
< ':'
< TYPEID Int
< ASSIGN
< INT_CONST 0
< ';'
< OBJECTID value
< '('
< ')'
< ':'
< TYPEID Int
< '{'
< OBJECTID var
< '}'
< ';'
< OBJECTID set_var
< '('
< OBJECTID num
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID SELF_TYPE
< '{'
< '{'
< OBJECTID var
< ASSIGN
< OBJECTID num
< ';'
< OBJECTID self
< ';'
< '}'
< '}'
< ';'
< OBJECTID method1
< '('
< OBJECTID num
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID SELF_TYPE
< '{'
< OBJECTID self
< '}'
< ';'
< OBJECTID method2
< '('
< OBJECTID num1
< ':'
< TYPEID Int
< ','
< OBJECTID num2
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID B
< '{'
< '('
< LET
< OBJECTID x
< ':'
< TYPEID Int
< IN
< '{'
< OBJECTID x
< ASSIGN
< OBJECTID num1
< '+'
< OBJECTID num2
< ';'
< '('
< NEW
< TYPEID B
< ')'
< '.'
< OBJECTID set_var
< '('
< OBJECTID x
< ')'
< ';'
< '}'
< ')'
< '}'
< ';'
< OBJECTID method3
< '('
< OBJECTID num
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID C
< '{'
< '('
< LET
< OBJECTID x
< ':'
< TYPEID Int
< IN
< '{'
< OBJECTID x
< ASSIGN
< '~'
< OBJECTID num
< ';'
< '('
< NEW
< TYPEID C
< ')'
< '.'
< OBJECTID set_var
< '('
< OBJECTID x
< ')'
< ';'
< '}'
< ')'
< '}'
< ';'
< OBJECTID method4
< '('
< OBJECTID num1
< ':'
< TYPEID Int
< ','
< OBJECTID num2
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID D
< '{'
< IF
< OBJECTID num2
< '<'
< OBJECTID num1
< THEN
< '('
< LET
< OBJECTID x
< ':'
< TYPEID Int
< IN
< '{'
< OBJECTID x
< ASSIGN
< OBJECTID num1
< '-'
< OBJECTID num2
< ';'
< '('
< NEW
< TYPEID D
< ')'
< '.'
< OBJECTID set_var
< '('
< OBJECTID x
< ')'
< ';'
< '}'
< ')'
< ELSE
< '('
< LET
< OBJECTID x
< ':'
< TYPEID Int
< IN
< '{'
< OBJECTID x
< ASSIGN
< OBJECTID num2
< '-'
< OBJECTID num1
< ';'
< '('
< NEW
< TYPEID D
< ')'
< '.'
< OBJECTID set_var
< '('
< OBJECTID x
< ')'
< ';'
< '}'
< ')'
< FI
< '}'
< ';'
< OBJECTID method5
< '('
< OBJECTID num
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID E
< '{'
< '('
< LET
< OBJECTID x
< ':'
< TYPEID Int
< ASSIGN
< INT_CONST 1
< IN
< '{'
< '('
< LET
< OBJECTID y
< ':'
< TYPEID Int
< ASSIGN
< INT_CONST 1
< IN
< WHILE
< OBJECTID y
< LE
< OBJECTID num
< LOOP
< '{'
< OBJECTID x
< ASSIGN
< OBJECTID x
< '*'
< OBJECTID y
< ';'
< OBJECTID y
< ASSIGN
< OBJECTID y
< '+'
< INT_CONST 1
< ';'
< '}'
---
> (*
>  *  A contribution from Anne Sheets (sheets@cory)
>  *
>  *  Tests the arithmetic operations and various other things
>  *)
> 
> class A {
> 
>    var : Int <- 0;
> 
>    value() : Int { var };
> 
>    set_var(num : Int) : SELF_TYPE {
>       {
>          var <- num;
>          self;
>       }
>    };
> 
>    method1(num : Int) : SELF_TYPE {  -- same
>       self
>    };
> 
>    method2(num1 : Int, num2 : Int) : B {  -- plus
>       (let x : Int in
> 	 {
>             x <- num1 + num2;
> 	    (new B).set_var(x);
> 	 }
>       )
>    };
> 
>    method3(num : Int) : C {  -- negate
>       (let x : Int in
> 	 {
>             x <- ~num;
> 	    (new C).set_var(x);
> 	 }
>       )
>    };
> 
>    method4(num1 : Int, num2 : Int) : D {  -- diff
>             if num2 < num1 then
>                (let x : Int in
> 		  {
>                      x <- num1 - num2;
> 	             (new D).set_var(x);
> 	          }
>                )
>             else
>                (let x : Int in
> 		  {
> 	             x <- num2 - num1;
> 	             (new D).set_var(x);
> 		  }
>                )
>             fi
>    };
> 
>    method5(num : Int) : E {  -- factorial
>       (let x : Int <- 1 in
> 	 {
> 	    (let y : Int <- 1 in
> 	       while y <= num loop
> 	          {
>                      x <- x * y;
> 	             y <- y + 1;
> 	          }
243,855c70,218
< ')'
< ';'
< '('
< NEW
< TYPEID E
< ')'
< '.'
< OBJECTID set_var
< '('
< OBJECTID x
< ')'
< ';'
< '}'
< ')'
< '}'
< ';'
< '}'
< ';'
< CLASS
< TYPEID B
< INHERITS
< TYPEID A
< '{'
< OBJECTID method5
< '('
< OBJECTID num
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID E
< '{'
< '('
< LET
< OBJECTID x
< ':'
< TYPEID Int
< IN
< '{'
< OBJECTID x
< ASSIGN
< OBJECTID num
< '*'
< OBJECTID num
< ';'
< '('
< NEW
< TYPEID E
< ')'
< '.'
< OBJECTID set_var
< '('
< OBJECTID x
< ')'
< ';'
< '}'
< ')'
< '}'
< ';'
< '}'
< ';'
< CLASS
< TYPEID C
< INHERITS
< TYPEID B
< '{'
< OBJECTID method6
< '('
< OBJECTID num
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID A
< '{'
< '('
< LET
< OBJECTID x
< ':'
< TYPEID Int
< IN
< '{'
< OBJECTID x
< ASSIGN
< '~'
< OBJECTID num
< ';'
< '('
< NEW
< TYPEID A
< ')'
< '.'
< OBJECTID set_var
< '('
< OBJECTID x
< ')'
< ';'
< '}'
< ')'
< '}'
< ';'
< OBJECTID method5
< '('
< OBJECTID num
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID E
< '{'
< '('
< LET
< OBJECTID x
< ':'
< TYPEID Int
< IN
< '{'
< OBJECTID x
< ASSIGN
< OBJECTID num
< '*'
< OBJECTID num
< '*'
< OBJECTID num
< ';'
< '('
< NEW
< TYPEID E
< ')'
< '.'
< OBJECTID set_var
< '('
< OBJECTID x
< ')'
< ';'
< '}'
< ')'
< '}'
< ';'
< '}'
< ';'
< CLASS
< TYPEID D
< INHERITS
< TYPEID B
< '{'
< OBJECTID method7
< '('
< OBJECTID num
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID Bool
< '{'
< '('
< LET
< OBJECTID x
< ':'
< TYPEID Int
< ASSIGN
< OBJECTID num
< IN
< IF
< OBJECTID x
< '<'
< INT_CONST 0
< THEN
< OBJECTID method7
< '('
< '~'
< OBJECTID x
< ')'
< ELSE
< IF
< INT_CONST 0
< '='
< OBJECTID x
< THEN
< BOOL_CONST true
< ELSE
< IF
< INT_CONST 1
< '='
< OBJECTID x
< THEN
< BOOL_CONST false
< ELSE
< IF
< INT_CONST 2
< '='
< OBJECTID x
< THEN
< BOOL_CONST false
< ELSE
< OBJECTID method7
< '('
< OBJECTID x
< '-'
< INT_CONST 3
< ')'
< FI
< FI
< FI
< FI
< ')'
< '}'
< ';'
< '}'
< ';'
< CLASS
< TYPEID E
< INHERITS
< TYPEID D
< '{'
< OBJECTID method6
< '('
< OBJECTID num
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID A
< '{'
< '('
< LET
< OBJECTID x
< ':'
< TYPEID Int
< IN
< '{'
< OBJECTID x
< ASSIGN
< OBJECTID num
< '/'
< INT_CONST 8
< ';'
< '('
< NEW
< TYPEID A
< ')'
< '.'
< OBJECTID set_var
< '('
< OBJECTID x
< ')'
< ';'
< '}'
< ')'
< '}'
< ';'
< '}'
< ';'
< CLASS
< TYPEID A2I
< '{'
< OBJECTID c2i
< '('
< OBJECTID char
< ':'
< TYPEID String
< ')'
< ':'
< TYPEID Int
< '{'
< IF
< OBJECTID char
< '='
< STR_CONST "0"
< THEN
< INT_CONST 0
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "1"
< THEN
< INT_CONST 1
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "2"
< THEN
< INT_CONST 2
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "3"
< THEN
< INT_CONST 3
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "4"
< THEN
< INT_CONST 4
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "5"
< THEN
< INT_CONST 5
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "6"
< THEN
< INT_CONST 6
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "7"
< THEN
< INT_CONST 7
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "8"
< THEN
< INT_CONST 8
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "9"
< THEN
< INT_CONST 9
< ELSE
< '{'
< OBJECTID abort
< '('
< ')'
< ';'
< INT_CONST 0
< ';'
< '}'
< FI
< FI
< FI
< FI
< FI
< FI
< FI
< FI
< FI
< FI
< '}'
< ';'
< OBJECTID i2c
< '('
< OBJECTID i
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID String
< '{'
< IF
< OBJECTID i
< '='
< INT_CONST 0
< THEN
< STR_CONST "0"
< ELSE
< IF
< OBJECTID i
< '='
< INT_CONST 1
< THEN
< STR_CONST "1"
< ELSE
< IF
< OBJECTID i
< '='
< INT_CONST 2
< THEN
< STR_CONST "2"
< ELSE
< IF
< OBJECTID i
< '='
< INT_CONST 3
< THEN
< STR_CONST "3"
< ELSE
< IF
< OBJECTID i
< '='
< INT_CONST 4
< THEN
< STR_CONST "4"
< ELSE
< IF
< OBJECTID i
< '='
< INT_CONST 5
< THEN
< STR_CONST "5"
< ELSE
< IF
< OBJECTID i
< '='
< INT_CONST 6
< THEN
< STR_CONST "6"
< ELSE
< IF
< OBJECTID i
< '='
< INT_CONST 7
< THEN
< STR_CONST "7"
< ELSE
< IF
< OBJECTID i
< '='
< INT_CONST 8
< THEN
< STR_CONST "8"
< ELSE
< IF
< OBJECTID i
< '='
< INT_CONST 9
< THEN
< STR_CONST "9"
< ELSE
< '{'
< OBJECTID abort
< '('
< ')'
< ';'
< STR_CONST ""
< ';'
< '}'
< FI
< FI
< FI
< FI
< FI
< FI
< FI
< FI
< FI
< FI
< '}'
< ';'
< OBJECTID a2i
< '('
< OBJECTID s
< ':'
< TYPEID String
< ')'
< ':'
< TYPEID Int
< '{'
< IF
< OBJECTID s
< '.'
< OBJECTID length
< '('
< ')'
< '='
< INT_CONST 0
< THEN
< INT_CONST 0
< ELSE
< IF
< OBJECTID s
< '.'
< OBJECTID substr
< '('
< INT_CONST 0
< ','
< INT_CONST 1
< ')'
< '='
< STR_CONST "-"
< THEN
< '~'
< OBJECTID a2i_aux
< '('
< OBJECTID s
< '.'
< OBJECTID substr
< '('
< INT_CONST 1
< ','
< OBJECTID s
< '.'
< OBJECTID length
< '('
< ')'
< '-'
< INT_CONST 1
< ')'
< ')'
< ELSE
< IF
< OBJECTID s
< '.'
< OBJECTID substr
< '('
< INT_CONST 0
< ','
< INT_CONST 1
< ')'
< '='
< STR_CONST "+"
< THEN
< OBJECTID a2i_aux
< '('
< OBJECTID s
< '.'
< OBJECTID substr
< '('
< INT_CONST 1
< ','
< OBJECTID s
< '.'
< OBJECTID length
< '('
< ')'
< '-'
< INT_CONST 1
< ')'
< ')'
< ELSE
< OBJECTID a2i_aux
< '('
< OBJECTID s
< ')'
< FI
< FI
< FI
< '}'
< ';'
< OBJECTID a2i_aux
< '('
< OBJECTID s
< ':'
< TYPEID String
< ')'
< ':'
< TYPEID Int
< '{'
< '('
< LET
< OBJECTID int
< ':'
< TYPEID Int
< ASSIGN
< INT_CONST 0
< IN
< '{'
< '('
< LET
< OBJECTID j
< ':'
< TYPEID Int
< ASSIGN
< OBJECTID s
< '.'
< OBJECTID length
< '('
< ')'
< IN
< '('
< LET
< OBJECTID i
< ':'
< TYPEID Int
< ASSIGN
< INT_CONST 0
< IN
< WHILE
< OBJECTID i
< '<'
< OBJECTID j
< LOOP
< '{'
< OBJECTID int
< ASSIGN
< OBJECTID int
< '*'
< INT_CONST 10
< '+'
< OBJECTID c2i
< '('
< OBJECTID s
< '.'
< OBJECTID substr
< '('
< OBJECTID i
< ','
< INT_CONST 1
< ')'
< ')'
< ';'
< OBJECTID i
< ASSIGN
< OBJECTID i
< '+'
< INT_CONST 1
< ';'
< '}'
---
> 	    );
> 	    (new E).set_var(x);
> 	 }
>       )
>    };
> 
> };
> 
> class B inherits A {  -- B is a number squared
> 
>    method5(num : Int) : E { -- square
>       (let x : Int in
> 	 {
>             x <- num * num;
> 	    (new E).set_var(x);
> 	 }
>       )
>    };
> 
> };
> 
> class C inherits B {
> 
>    method6(num : Int) : A { -- negate
>       (let x : Int in
>          {
>             x <- ~num;
> 	    (new A).set_var(x);
>          }
>       )
>    };
> 
>    method5(num : Int) : E {  -- cube
>       (let x : Int in
> 	 {
>             x <- num * num * num;
> 	    (new E).set_var(x);
> 	 }
>       )
>    };
> 
> };
> 
> class D inherits B {  
> 		
>    method7(num : Int) : Bool {  -- divisible by 3
>       (let x : Int <- num in
>             if x < 0 then method7(~x) else
>             if 0 = x then true else
>             if 1 = x then false else
> 	    if 2 = x then false else
> 	       method7(x - 3)
> 	    fi fi fi fi
>       )
>    };
> 
> };
> 
> class E inherits D {
> 
>    method6(num : Int) : A {  -- division
>       (let x : Int in
>          {
>             x <- num / 8;
> 	    (new A).set_var(x);
>          }
>       )
>    };
> 
> };
> 
> (* The following code is from atoi.cl in ~cs164/examples *)
> 
> (*
>    The class A2I provides integer-to-string and string-to-integer
> conversion routines.  To use these routines, either inherit them
> in the class where needed, have a dummy variable bound to
> something of type A2I, or simpl write (new A2I).method(argument).
> *)
> 
> (*
>    c2i   Converts a 1-character string to an integer.  Aborts
>          if the string is not "0" through "9"
> *)
> class A2I {
> 
>      c2i(char : String) : Int {
> 	if char = "0" then 0 else
> 	if char = "1" then 1 else
> 	if char = "2" then 2 else
>         if char = "3" then 3 else
>         if char = "4" then 4 else
>         if char = "5" then 5 else
>         if char = "6" then 6 else
>         if char = "7" then 7 else
>         if char = "8" then 8 else
>         if char = "9" then 9 else
>         { abort(); 0; }  (* the 0 is needed to satisfy the
> 				  typchecker *)
>         fi fi fi fi fi fi fi fi fi fi
>      };
> 
> (*
>    i2c is the inverse of c2i.
> *)
>      i2c(i : Int) : String {
> 	if i = 0 then "0" else
> 	if i = 1 then "1" else
> 	if i = 2 then "2" else
> 	if i = 3 then "3" else
> 	if i = 4 then "4" else
> 	if i = 5 then "5" else
> 	if i = 6 then "6" else
> 	if i = 7 then "7" else
> 	if i = 8 then "8" else
> 	if i = 9 then "9" else
> 	{ abort(); ""; }  -- the "" is needed to satisfy the typchecker
>         fi fi fi fi fi fi fi fi fi fi
>      };
> 
> (*
>    a2i converts an ASCII string into an integer.  The empty string
> is converted to 0.  Signed and unsigned strings are handled.  The
> method aborts if the string does not represent an integer.  Very
> long strings of digits produce strange answers because of arithmetic 
> overflow.
> 
> *)
>      a2i(s : String) : Int {
>         if s.length() = 0 then 0 else
> 	if s.substr(0,1) = "-" then ~a2i_aux(s.substr(1,s.length()-1)) else
>         if s.substr(0,1) = "+" then a2i_aux(s.substr(1,s.length()-1)) else
>            a2i_aux(s)
>         fi fi fi
>      };
> 
> (* a2i_aux converts the usigned portion of the string.  As a
>    programming example, this method is written iteratively.  *)
> 
>      a2i_aux(s : String) : Int {
> 	(let int : Int <- 0 in	
>            {	
>                (let j : Int <- s.length() in
> 	          (let i : Int <- 0 in
> 		    while i < j loop
> 			{
> 			    int <- int * 10 + c2i(s.substr(i,1));
> 			    i <- i + 1;
> 			}
857,1304c220,329
< ')'
< ')'
< ';'
< OBJECTID int
< ';'
< '}'
< ')'
< '}'
< ';'
< OBJECTID i2a
< '('
< OBJECTID i
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID String
< '{'
< IF
< OBJECTID i
< '='
< INT_CONST 0
< THEN
< STR_CONST "0"
< ELSE
< IF
< INT_CONST 0
< '<'
< OBJECTID i
< THEN
< OBJECTID i2a_aux
< '('
< OBJECTID i
< ')'
< ELSE
< STR_CONST "-"
< '.'
< OBJECTID concat
< '('
< OBJECTID i2a_aux
< '('
< OBJECTID i
< '*'
< '~'
< INT_CONST 1
< ')'
< ')'
< FI
< FI
< '}'
< ';'
< OBJECTID i2a_aux
< '('
< OBJECTID i
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID String
< '{'
< IF
< OBJECTID i
< '='
< INT_CONST 0
< THEN
< STR_CONST ""
< ELSE
< '('
< LET
< OBJECTID next
< ':'
< TYPEID Int
< ASSIGN
< OBJECTID i
< '/'
< INT_CONST 10
< IN
< OBJECTID i2a_aux
< '('
< OBJECTID next
< ')'
< '.'
< OBJECTID concat
< '('
< OBJECTID i2c
< '('
< OBJECTID i
< '-'
< OBJECTID next
< '*'
< INT_CONST 10
< ')'
< ')'
< ')'
< FI
< '}'
< ';'
< '}'
< ';'
< CLASS
< TYPEID Main
< INHERITS
< TYPEID IO
< '{'
< OBJECTID char
< ':'
< TYPEID String
< ';'
< OBJECTID avar
< ':'
< TYPEID A
< ';'
< OBJECTID a_var
< ':'
< TYPEID A
< ';'
< OBJECTID flag
< ':'
< TYPEID Bool
< ASSIGN
< BOOL_CONST true
< ';'
< OBJECTID menu
< '('
< ')'
< ':'
< TYPEID String
< '{'
< '{'
< OBJECTID out_string
< '('
< STR_CONST "\n\tTo add a number to "
< ')'
< ';'
< OBJECTID print
< '('
< OBJECTID avar
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "...enter a:\n"
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "\tTo negate "
< ')'
< ';'
< OBJECTID print
< '('
< OBJECTID avar
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "...enter b:\n"
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "\tTo find the difference between "
< ')'
< ';'
< OBJECTID print
< '('
< OBJECTID avar
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "and another number...enter c:\n"
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "\tTo find the factorial of "
< ')'
< ';'
< OBJECTID print
< '('
< OBJECTID avar
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "...enter d:\n"
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "\tTo square "
< ')'
< ';'
< OBJECTID print
< '('
< OBJECTID avar
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "...enter e:\n"
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "\tTo cube "
< ')'
< ';'
< OBJECTID print
< '('
< OBJECTID avar
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "...enter f:\n"
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "\tTo find out if "
< ')'
< ';'
< OBJECTID print
< '('
< OBJECTID avar
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "is a multiple of 3...enter g:\n"
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "\tTo divide "
< ')'
< ';'
< OBJECTID print
< '('
< OBJECTID avar
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "by 8...enter h:\n"
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "\tTo get a new number...enter j:\n"
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "\tTo quit...enter q:\n\n"
< ')'
< ';'
< OBJECTID in_string
< '('
< ')'
< ';'
< '}'
< '}'
< ';'
< OBJECTID prompt
< '('
< ')'
< ':'
< TYPEID String
< '{'
< '{'
< OBJECTID out_string
< '('
< STR_CONST "\n"
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "Please enter a number...  "
< ')'
< ';'
< OBJECTID in_string
< '('
< ')'
< ';'
< '}'
< '}'
< ';'
< OBJECTID get_int
< '('
< ')'
< ':'
< TYPEID Int
< '{'
< '{'
< '('
< LET
< OBJECTID z
< ':'
< TYPEID A2I
< ASSIGN
< NEW
< TYPEID A2I
< IN
< '('
< LET
< OBJECTID s
< ':'
< TYPEID String
< ASSIGN
< OBJECTID prompt
< '('
< ')'
< IN
< OBJECTID z
< '.'
< OBJECTID a2i
< '('
< OBJECTID s
< ')'
< ')'
< ')'
< ';'
< '}'
< '}'
< ';'
< OBJECTID is_even
< '('
< OBJECTID num
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID Bool
< '{'
< '('
< LET
< OBJECTID x
< ':'
< TYPEID Int
< ASSIGN
< OBJECTID num
< IN
< IF
< OBJECTID x
< '<'
< INT_CONST 0
< THEN
< OBJECTID is_even
< '('
< '~'
< OBJECTID x
< ')'
< ELSE
< IF
< INT_CONST 0
< '='
< OBJECTID x
< THEN
< BOOL_CONST true
< ELSE
< IF
< INT_CONST 1
< '='
< OBJECTID x
< THEN
< BOOL_CONST false
< ELSE
< OBJECTID is_even
< '('
< OBJECTID x
< '-'
< INT_CONST 2
< ')'
< FI
< FI
< FI
< ')'
< '}'
< ';'
< OBJECTID class_type
< '('
< OBJECTID var
< ':'
< TYPEID A
< ')'
< ':'
< TYPEID SELF_TYPE
< '{'
< CASE
< OBJECTID var
< OF
< OBJECTID a
< ':'
< TYPEID A
< DARROW
< OBJECTID out_string
< '('
< STR_CONST "Class type is now A\n"
< ')'
< ';'
< OBJECTID b
< ':'
< TYPEID B
< DARROW
< OBJECTID out_string
< '('
< STR_CONST "Class type is now B\n"
< ')'
< ';'
< OBJECTID c
< ':'
< TYPEID C
< DARROW
< OBJECTID out_string
< '('
< STR_CONST "Class type is now C\n"
< ')'
< ';'
< OBJECTID d
< ':'
< TYPEID D
< DARROW
< OBJECTID out_string
< '('
< STR_CONST "Class type is now D\n"
< ')'
< ';'
< OBJECTID e
< ':'
< TYPEID E
< DARROW
< OBJECTID out_string
< '('
< STR_CONST "Class type is now E\n"
< ')'
< ';'
< OBJECTID o
< ':'
< TYPEID Object
< DARROW
< OBJECTID out_string
< '('
< STR_CONST "Oooops\n"
< ')'
< ';'
---
> 		  )
> 	       );
>               int;
> 	    }
>         )
>      };
> 
> (* i2a converts an integer to a string.  Positive and negative 
>    numbers are handled correctly.  *)
> 
>     i2a(i : Int) : String {
> 	if i = 0 then "0" else 
>         if 0 < i then i2a_aux(i) else
>           "-".concat(i2a_aux(i * ~1)) 
>         fi fi
>     };
> 	
> (* i2a_aux is an example using recursion.  *)		
> 
>     i2a_aux(i : Int) : String {
>         if i = 0 then "" else 
> 	    (let next : Int <- i / 10 in
> 		i2a_aux(next).concat(i2c(i - next * 10))
> 	    )
>         fi
>     };
> 
> };
> 
> class Main inherits IO {
>    
>    char : String;
>    avar : A; 
>    a_var : A;
>    flag : Bool <- true;
> 
>    menu() : String {
>       {
>          out_string("\n\tTo add a number to ");
>          print(avar);
>          out_string("...enter a:\n");
>          out_string("\tTo negate ");
>          print(avar);
>          out_string("...enter b:\n");
>          out_string("\tTo find the difference between ");
>          print(avar);
>          out_string("and another number...enter c:\n");
>          out_string("\tTo find the factorial of ");
>          print(avar);
>          out_string("...enter d:\n");
>          out_string("\tTo square ");
>          print(avar);
>          out_string("...enter e:\n");
>          out_string("\tTo cube ");
>          print(avar);
>          out_string("...enter f:\n");
>          out_string("\tTo find out if ");
>          print(avar);
>          out_string("is a multiple of 3...enter g:\n");
>          out_string("\tTo divide ");
>          print(avar);
>          out_string("by 8...enter h:\n");
> 	 out_string("\tTo get a new number...enter j:\n");
> 	 out_string("\tTo quit...enter q:\n\n");
>          in_string();
>       }
>    };
> 
>    prompt() : String {
>       {
>          out_string("\n");
>          out_string("Please enter a number...  ");
>          in_string();
>       }
>    };
> 
>    get_int() : Int {
>       {
> 	 (let z : A2I <- new A2I in
> 	    (let s : String <- prompt() in
> 	       z.a2i(s)
> 	    )
>          );
>       }
>    };
> 
>    is_even(num : Int) : Bool {
>       (let x : Int <- num in
>             if x < 0 then is_even(~x) else
>             if 0 = x then true else
> 	    if 1 = x then false else
> 	          is_even(x - 2)
> 	    fi fi fi
>       )
>    };
> 
>    class_type(var : A) : SELF_TYPE {
>       case var of
> 	 a : A #1 DARROW
>  out_string("Class type is now A\n");
> 	 b : B #1 DARROW
>  out_string("Class type is now B\n");
> 	 c : C #1 DARROW
>  out_string("Class type is now C\n");
> 	 d : D #1 DARROW
>  out_string("Class type is now D\n");
> 	 e : E #1 DARROW
>  out_string("Class type is now E\n");
> 	 o : Object #1 DARROW
>  out_string("Oooops\n");
1306,1858c331,436
< '}'
< ';'
< OBJECTID print
< '('
< OBJECTID var
< ':'
< TYPEID A
< ')'
< ':'
< TYPEID SELF_TYPE
< '{'
< '('
< LET
< OBJECTID z
< ':'
< TYPEID A2I
< ASSIGN
< NEW
< TYPEID A2I
< IN
< '{'
< OBJECTID out_string
< '('
< OBJECTID z
< '.'
< OBJECTID i2a
< '('
< OBJECTID var
< '.'
< OBJECTID value
< '('
< ')'
< ')'
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST " "
< ')'
< ';'
< '}'
< ')'
< '}'
< ';'
< OBJECTID main
< '('
< ')'
< ':'
< TYPEID Object
< '{'
< '{'
< OBJECTID avar
< ASSIGN
< '('
< NEW
< TYPEID A
< ')'
< ';'
< WHILE
< OBJECTID flag
< LOOP
< '{'
< OBJECTID out_string
< '('
< STR_CONST "number "
< ')'
< ';'
< OBJECTID print
< '('
< OBJECTID avar
< ')'
< ';'
< IF
< OBJECTID is_even
< '('
< OBJECTID avar
< '.'
< OBJECTID value
< '('
< ')'
< ')'
< THEN
< OBJECTID out_string
< '('
< STR_CONST "is even!\n"
< ')'
< ELSE
< OBJECTID out_string
< '('
< STR_CONST "is odd!\n"
< ')'
< FI
< ';'
< OBJECTID class_type
< '('
< OBJECTID avar
< ')'
< ';'
< OBJECTID char
< ASSIGN
< OBJECTID menu
< '('
< ')'
< ';'
< IF
< OBJECTID char
< '='
< STR_CONST "a"
< THEN
< '{'
< OBJECTID a_var
< ASSIGN
< '('
< NEW
< TYPEID A
< ')'
< '.'
< OBJECTID set_var
< '('
< OBJECTID get_int
< '('
< ')'
< ')'
< ';'
< OBJECTID avar
< ASSIGN
< '('
< NEW
< TYPEID B
< ')'
< '.'
< OBJECTID method2
< '('
< OBJECTID avar
< '.'
< OBJECTID value
< '('
< ')'
< ','
< OBJECTID a_var
< '.'
< OBJECTID value
< '('
< ')'
< ')'
< ';'
< '}'
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "b"
< THEN
< CASE
< OBJECTID avar
< OF
< OBJECTID c
< ':'
< TYPEID C
< DARROW
< OBJECTID avar
< ASSIGN
< OBJECTID c
< '.'
< OBJECTID method6
< '('
< OBJECTID c
< '.'
< OBJECTID value
< '('
< ')'
< ')'
< ';'
< OBJECTID a
< ':'
< TYPEID A
< DARROW
< OBJECTID avar
< ASSIGN
< OBJECTID a
< '.'
< OBJECTID method3
< '('
< OBJECTID a
< '.'
< OBJECTID value
< '('
< ')'
< ')'
< ';'
< OBJECTID o
< ':'
< TYPEID Object
< DARROW
< '{'
< OBJECTID out_string
< '('
< STR_CONST "Oooops\n"
< ')'
< ';'
< OBJECTID abort
< '('
< ')'
< ';'
< INT_CONST 0
< ';'
< '}'
< ';'
< ESAC
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "c"
< THEN
< '{'
< OBJECTID a_var
< ASSIGN
< '('
< NEW
< TYPEID A
< ')'
< '.'
< OBJECTID set_var
< '('
< OBJECTID get_int
< '('
< ')'
< ')'
< ';'
< OBJECTID avar
< ASSIGN
< '('
< NEW
< TYPEID D
< ')'
< '.'
< OBJECTID method4
< '('
< OBJECTID avar
< '.'
< OBJECTID value
< '('
< ')'
< ','
< OBJECTID a_var
< '.'
< OBJECTID value
< '('
< ')'
< ')'
< ';'
< '}'
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "d"
< THEN
< OBJECTID avar
< ASSIGN
< '('
< NEW
< TYPEID C
< ')'
< '@'
< TYPEID A
< '.'
< OBJECTID method5
< '('
< OBJECTID avar
< '.'
< OBJECTID value
< '('
< ')'
< ')'
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "e"
< THEN
< OBJECTID avar
< ASSIGN
< '('
< NEW
< TYPEID C
< ')'
< '@'
< TYPEID B
< '.'
< OBJECTID method5
< '('
< OBJECTID avar
< '.'
< OBJECTID value
< '('
< ')'
< ')'
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "f"
< THEN
< OBJECTID avar
< ASSIGN
< '('
< NEW
< TYPEID C
< ')'
< '@'
< TYPEID C
< '.'
< OBJECTID method5
< '('
< OBJECTID avar
< '.'
< OBJECTID value
< '('
< ')'
< ')'
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "g"
< THEN
< IF
< '('
< '('
< NEW
< TYPEID D
< ')'
< '.'
< OBJECTID method7
< '('
< OBJECTID avar
< '.'
< OBJECTID value
< '('
< ')'
< ')'
< ')'
< THEN
< '{'
< OBJECTID out_string
< '('
< STR_CONST "number "
< ')'
< ';'
< OBJECTID print
< '('
< OBJECTID avar
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "is divisible by 3.\n"
< ')'
< ';'
< '}'
< ELSE
< '{'
< OBJECTID out_string
< '('
< STR_CONST "number "
< ')'
< ';'
< OBJECTID print
< '('
< OBJECTID avar
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "is not divisible by 3.\n"
< ')'
< ';'
< '}'
< FI
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "h"
< THEN
< '('
< LET
< OBJECTID x
< ':'
< TYPEID A
< IN
< '{'
< OBJECTID x
< ASSIGN
< '('
< NEW
< TYPEID E
< ')'
< '.'
< OBJECTID method6
< '('
< OBJECTID avar
< '.'
< OBJECTID value
< '('
< ')'
< ')'
< ';'
< '('
< LET
< OBJECTID r
< ':'
< TYPEID Int
< ASSIGN
< '('
< OBJECTID avar
< '.'
< OBJECTID value
< '('
< ')'
< '-'
< '('
< OBJECTID x
< '.'
< OBJECTID value
< '('
< ')'
< '*'
< INT_CONST 8
< ')'
< ')'
< IN
< '{'
< OBJECTID out_string
< '('
< STR_CONST "number "
< ')'
< ';'
< OBJECTID print
< '('
< OBJECTID avar
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "is equal to "
< ')'
< ';'
< OBJECTID print
< '('
< OBJECTID x
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "times 8 with a remainder of "
< ')'
< ';'
< '('
< LET
< OBJECTID a
< ':'
< TYPEID A2I
< ASSIGN
< NEW
< TYPEID A2I
< IN
< '{'
< OBJECTID out_string
< '('
< OBJECTID a
< '.'
< OBJECTID i2a
< '('
< OBJECTID r
< ')'
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "\n"
< ')'
< ';'
< '}'
< ')'
< ';'
< '}'
< ')'
< ';'
< OBJECTID avar
< ASSIGN
< OBJECTID x
< ';'
< '}'
< ')'
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "j"
< THEN
< OBJECTID avar
< ASSIGN
< '('
< NEW
< TYPEID A
< ')'
< ELSE
< IF
< OBJECTID char
< '='
< STR_CONST "q"
< THEN
< OBJECTID flag
< ASSIGN
< BOOL_CONST false
< ELSE
< OBJECTID avar
< ASSIGN
< '('
< NEW
< TYPEID A
< ')'
< '.'
< OBJECTID method1
< '('
< OBJECTID avar
< '.'
< OBJECTID value
< '('
< ')'
< ')'
< FI
< FI
< FI
< FI
< FI
< FI
< FI
< FI
< FI
< FI
< ';'
< '}'
< POOL
< ';'
< '}'
< '}'
< ';'
< '}'
< ';'
---
>    };
>  
>    print(var : A) : SELF_TYPE {
>      (let z : A2I <- new A2I in
> 	{
> 	   out_string(z.i2a(var.value()));
> 	   out_string(" ");
> 	}
>      )
>    };
> 
>    main() : Object {
>       {
>          avar <- (new A);
>          while flag loop
>             {
> 	       -- avar <- (new A).set_var(get_int());
> 	       out_string("number ");
> 	       print(avar);
> 	       if is_even(avar.value()) then
> 	          out_string("is even!\n")
> 	       else
> 	          out_string("is odd!\n")
> 	       fi;
> 	       -- print(avar); -- prints out answer
> 	       class_type(avar);
> 	       char <- menu();
>                   if char = "a" then -- add
>                      {
>                         a_var <- (new A).set_var(get_int());
> 	                avar <- (new B).method2(avar.value(), a_var.value());
> 	             } else
>                   if char = "b" then -- negate
>                      case avar of
> 	                   c : C #1 DARROW
>  avar <- c.method6(c.value());
> 	                   a : A #1 DARROW
>  avar <- a.method3(a.value());
> 	                   o : Object #1 DARROW
>  {
> 		                  out_string("Oooops\n");
> 		                  abort(); 0;
> 		               };
>                      esac else
>                   if char = "c" then -- diff
>                      {
>                         a_var <- (new A).set_var(get_int());
> 	                avar <- (new D).method4(avar.value(), a_var.value());
> 	             } else
>                   if char = "d" then avar <- (new C)@A.method5(avar.value()) else
> 		          -- factorial
>                   if char = "e" then avar <- (new C)@B.method5(avar.value()) else
> 			  -- square
>                   if char = "f" then avar <- (new C)@C.method5(avar.value()) else
> 			  -- cube
>                   if char = "g" then -- multiple of 3?
> 		      if ((new D).method7(avar.value()))
> 		                       then -- avar <- (new A).method1(avar.value())
> 			 {
> 	                    out_string("number ");
> 	                    print(avar);
> 	                    out_string("is divisible by 3.\n");
> 			 }
> 			 else  -- avar <- (new A).set_var(0)
> 			 {
> 	                    out_string("number ");
> 	                    print(avar);
> 	                    out_string("is not divisible by 3.\n");
> 			 }
> 		      fi else
>                   if char = "h" then 
> 		      (let x : A in
> 			 {
> 		            x <- (new E).method6(avar.value());
> 			    (let r : Int <- (avar.value() - (x.value() * 8)) in
> 			       {
> 			          out_string("number ");
> 			          print(avar);
> 			          out_string("is equal to ");
> 			          print(x);
> 			          out_string("times 8 with a remainder of ");
> 				  (let a : A2I <- new A2I in
> 				     {
> 			                out_string(a.i2a(r));
> 			                out_string("\n");
> 				     }
> 				  ); -- end let a:
> 			       }
>                             ); -- end let r:
> 			    avar <- x;
> 		         } 
> 		      )  -- end let x:
> 		      else
>                   if char = "j" then avar <- (new A)
> 		      else
>                   if char = "q" then flag <- false
> 		      else
>                       avar <- (new A).method1(avar.value()) -- divide/8
>                   fi fi fi fi fi fi fi fi fi fi;
>             }
>          pool;
>        }
>    };
> 
> };
> 
