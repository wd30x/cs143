1,279c1,82
< CLASS
< TYPEID List
< INHERITS
< TYPEID IO
< '{'
< OBJECTID isNil
< '('
< ')'
< ':'
< TYPEID Bool
< '{'
< '{'
< OBJECTID abort
< '('
< ')'
< ';'
< BOOL_CONST true
< ';'
< '}'
< '}'
< ';'
< OBJECTID cons
< '('
< OBJECTID hd
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID Cons
< '{'
< '('
< LET
< OBJECTID new_cell
< ':'
< TYPEID Cons
< ASSIGN
< NEW
< TYPEID Cons
< IN
< OBJECTID new_cell
< '.'
< OBJECTID init
< '('
< OBJECTID hd
< ','
< OBJECTID self
< ')'
< ')'
< '}'
< ';'
< OBJECTID car
< '('
< ')'
< ':'
< TYPEID Int
< '{'
< '{'
< OBJECTID abort
< '('
< ')'
< ';'
< NEW
< TYPEID Int
< ';'
< '}'
< '}'
< ';'
< OBJECTID cdr
< '('
< ')'
< ':'
< TYPEID List
< '{'
< '{'
< OBJECTID abort
< '('
< ')'
< ';'
< NEW
< TYPEID List
< ';'
< '}'
< '}'
< ';'
< OBJECTID rev
< '('
< ')'
< ':'
< TYPEID List
< '{'
< OBJECTID cdr
< '('
< ')'
< '}'
< ';'
< OBJECTID sort
< '('
< ')'
< ':'
< TYPEID List
< '{'
< OBJECTID cdr
< '('
< ')'
< '}'
< ';'
< OBJECTID insert
< '('
< OBJECTID i
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID List
< '{'
< OBJECTID cdr
< '('
< ')'
< '}'
< ';'
< OBJECTID rcons
< '('
< OBJECTID i
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID List
< '{'
< OBJECTID cdr
< '('
< ')'
< '}'
< ';'
< OBJECTID print_list
< '('
< ')'
< ':'
< TYPEID Object
< '{'
< OBJECTID abort
< '('
< ')'
< '}'
< ';'
< '}'
< ';'
< CLASS
< TYPEID Cons
< INHERITS
< TYPEID List
< '{'
< OBJECTID xcar
< ':'
< TYPEID Int
< ';'
< OBJECTID xcdr
< ':'
< TYPEID List
< ';'
< OBJECTID isNil
< '('
< ')'
< ':'
< TYPEID Bool
< '{'
< BOOL_CONST false
< '}'
< ';'
< OBJECTID init
< '('
< OBJECTID hd
< ':'
< TYPEID Int
< ','
< OBJECTID tl
< ':'
< TYPEID List
< ')'
< ':'
< TYPEID Cons
< '{'
< '{'
< OBJECTID xcar
< ASSIGN
< OBJECTID hd
< ';'
< OBJECTID xcdr
< ASSIGN
< OBJECTID tl
< ';'
< OBJECTID self
< ';'
< '}'
< '}'
< ';'
< OBJECTID car
< '('
< ')'
< ':'
< TYPEID Int
< '{'
< OBJECTID xcar
< '}'
< ';'
< OBJECTID cdr
< '('
< ')'
< ':'
< TYPEID List
< '{'
< OBJECTID xcdr
< '}'
< ';'
< OBJECTID rev
< '('
< ')'
< ':'
< TYPEID List
< '{'
< '('
< OBJECTID xcdr
< '.'
< OBJECTID rev
< '('
< ')'
< ')'
< '.'
< OBJECTID rcons
< '('
< OBJECTID xcar
< ')'
< '}'
< ';'
< OBJECTID sort
< '('
< ')'
< ':'
< TYPEID List
< '{'
< '('
< OBJECTID xcdr
< '.'
< OBJECTID sort
< '('
< ')'
< ')'
< '.'
< OBJECTID insert
< '('
< OBJECTID xcar
< ')'
< '}'
< ';'
< OBJECTID insert
< '('
< OBJECTID i
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID List
< '{'
< IF
< OBJECTID i
< '<'
< OBJECTID xcar
< THEN
< '('
< NEW
< TYPEID Cons
< ')'
< '.'
< OBJECTID init
< '('
< OBJECTID i
< ','
< OBJECTID self
< ')'
---
> (*
>    This file presents a fairly large example of Cool programming.  The
> class List defines the names of standard list operations ala Scheme:
> car, cdr, cons, isNil, rev, sort, rcons (add an element to the end of
> the list), and print_list.  In the List class most of these functions
> are just stubs that abort if ever called.  The classes Nil and Cons
> inherit from List and define the same operations, but now as
> appropriate to the empty list (for the Nil class) and for cons cells (for
> the Cons class).
> 
> The Main class puts all of this code through the following silly 
> test exercise:
> 
>    1. prompt for a number N
>    2. generate a list of numbers 0..N-1
>    3. reverse the list
>    4. sort the list
>    5. print the sorted list
> 
> Because the sort used is a quadratic space insertion sort, sorting
> moderately large lists will cause spim to run out of memory.
> *)
> 
> Class List inherits IO { 
>         (* Since abort() returns Object, we need something of
> 	   type Bool at the end of the block to satisfy the typechecker. 
>            This code is unreachable, since abort() halts the program. *)
> 	isNil() : Bool { { abort(); true; } };
> 
> 	cons(hd : Int) : Cons {
> 	  (let new_cell : Cons <- new Cons in
> 		new_cell.init(hd,self)
> 	  )
> 	};
> 
> 	(* 
> 	   Since abort "returns" type Object, we have to add
> 	   an expression of type Int here to satisfy the typechecker.
> 	   This code is, of course, unreachable.
>         *)
> 	car() : Int { { abort(); new Int; } };
> 
> 	cdr() : List { { abort(); new List; } };
> 
> 	rev() : List { cdr() };
> 
> 	sort() : List { cdr() };
> 
> 	insert(i : Int) : List { cdr() };
> 
> 	rcons(i : Int) : List { cdr() };
> 	
> 	print_list() : Object { abort() };
> };
> 
> Class Cons inherits List {
> 	xcar : Int;  -- We keep the car in cdr in attributes.
> 	xcdr : List; -- Because methods and features must have different names,
> 		     -- we use xcar and xcdr for the attributes and reserve
> 		     -- cons and car for the features.
> 
> 	isNil() : Bool { false };
> 
> 	init(hd : Int, tl : List) : Cons {
> 	  {
> 	    xcar <- hd;
> 	    xcdr <- tl;
> 	    self;
> 	  }
> 	};
> 	  
> 	car() : Int { xcar };
> 
> 	cdr() : List { xcdr };
> 
> 	rev() : List { (xcdr.rev()).rcons(xcar) };
> 
> 	sort() : List { (xcdr.sort()).insert(xcar) };
> 
> 	insert(i : Int) : List {
> 		if i < xcar then
> 			(new Cons).init(i,self)
281,296c84
< '('
< NEW
< TYPEID Cons
< ')'
< '.'
< OBJECTID init
< '('
< OBJECTID xcar
< ','
< OBJECTID xcdr
< '.'
< OBJECTID insert
< '('
< OBJECTID i
< ')'
< ')'
---
> 			(new Cons).init(xcar,xcdr.insert(i))
298,470c86,123
< '}'
< ';'
< OBJECTID rcons
< '('
< OBJECTID i
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID List
< '{'
< '('
< NEW
< TYPEID Cons
< ')'
< '.'
< OBJECTID init
< '('
< OBJECTID xcar
< ','
< OBJECTID xcdr
< '.'
< OBJECTID rcons
< '('
< OBJECTID i
< ')'
< ')'
< '}'
< ';'
< OBJECTID print_list
< '('
< ')'
< ':'
< TYPEID Object
< '{'
< '{'
< OBJECTID out_int
< '('
< OBJECTID xcar
< ')'
< ';'
< OBJECTID out_string
< '('
< STR_CONST "\n"
< ')'
< ';'
< OBJECTID xcdr
< '.'
< OBJECTID print_list
< '('
< ')'
< ';'
< '}'
< '}'
< ';'
< '}'
< ';'
< CLASS
< TYPEID Nil
< INHERITS
< TYPEID List
< '{'
< OBJECTID isNil
< '('
< ')'
< ':'
< TYPEID Bool
< '{'
< BOOL_CONST true
< '}'
< ';'
< OBJECTID rev
< '('
< ')'
< ':'
< TYPEID List
< '{'
< OBJECTID self
< '}'
< ';'
< OBJECTID sort
< '('
< ')'
< ':'
< TYPEID List
< '{'
< OBJECTID self
< '}'
< ';'
< OBJECTID insert
< '('
< OBJECTID i
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID List
< '{'
< OBJECTID rcons
< '('
< OBJECTID i
< ')'
< '}'
< ';'
< OBJECTID rcons
< '('
< OBJECTID i
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID List
< '{'
< '('
< NEW
< TYPEID Cons
< ')'
< '.'
< OBJECTID init
< '('
< OBJECTID i
< ','
< OBJECTID self
< ')'
< '}'
< ';'
< OBJECTID print_list
< '('
< ')'
< ':'
< TYPEID Object
< '{'
< BOOL_CONST true
< '}'
< ';'
< '}'
< ';'
< CLASS
< TYPEID Main
< INHERITS
< TYPEID IO
< '{'
< OBJECTID l
< ':'
< TYPEID List
< ';'
< OBJECTID iota
< '('
< OBJECTID i
< ':'
< TYPEID Int
< ')'
< ':'
< TYPEID List
< '{'
< '{'
< OBJECTID l
< ASSIGN
< NEW
< TYPEID Nil
< ';'
< '('
< LET
< OBJECTID j
< ':'
< TYPEID Int
< ASSIGN
< INT_CONST 0
< IN
< WHILE
< OBJECTID j
< '<'
< OBJECTID i
---
> 	};
> 
> 	rcons(i : Int) : List { (new Cons).init(xcar, xcdr.rcons(i)) };
> 
> 	print_list() : Object {
> 		{
> 		     out_int(xcar);
> 		     out_string("\n");
> 		     xcdr.print_list();
> 		}
> 	};
> };
> 
> Class Nil inherits List {
> 	isNil() : Bool { true };
> 
>         rev() : List { self };
> 
> 	sort() : List { self };
> 
> 	insert(i : Int) : List { rcons(i) };
> 
> 	rcons(i : Int) : List { (new Cons).init(i,self) };
> 
> 	print_list() : Object { true };
> 
> };
> 
> Class Main inherits IO {
> 
> 	l : List;
> 
> 	(* iota maps its integer argument n into the list 0..n-1 *)
> 	iota(i : Int) : List {
> 	    {
> 		l <- new Nil;
> 		(let j : Int <- 0 in
> 		   while j < i 
472,493c125,128
< '{'
< OBJECTID l
< ASSIGN
< '('
< NEW
< TYPEID Cons
< ')'
< '.'
< OBJECTID init
< '('
< OBJECTID j
< ','
< OBJECTID l
< ')'
< ';'
< OBJECTID j
< ASSIGN
< OBJECTID j
< '+'
< INT_CONST 1
< ';'
< '}'
---
> 		     {
> 		       l <- (new Cons).init(j,l);
> 		       j <- j + 1;
> 		     } 
495,537c130,142
< ')'
< ';'
< OBJECTID l
< ';'
< '}'
< '}'
< ';'
< OBJECTID main
< '('
< ')'
< ':'
< TYPEID Object
< '{'
< '{'
< OBJECTID out_string
< '('
< STR_CONST "How many numbers to sort?"
< ')'
< ';'
< OBJECTID iota
< '('
< OBJECTID in_int
< '('
< ')'
< ')'
< '.'
< OBJECTID rev
< '('
< ')'
< '.'
< OBJECTID sort
< '('
< ')'
< '.'
< OBJECTID print_list
< '('
< ')'
< ';'
< '}'
< '}'
< ';'
< '}'
< ';'
---
> 		);
> 		l;
> 	    }
> 	};		
> 
> 	main() : Object {
> 	   {
> 	     out_string("How many numbers to sort?");
> 	     iota(in_int()).rev().sort().print_list();
> 	   }
> 	};
> };			    
> 
